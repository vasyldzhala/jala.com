// Cribs on Angular

>npm install -g @angular/cli
>ng new PROG_NAME

// start dev mode
>npm run start

// create component from console with cli
>cd src/app        // move to destination directory
>ng g(enereate) c(omponent) componentname
>ng g c componentname --spec=false // genereate without unit test

// install bootstrap
>npm i bootstrap --save
// add external styles in angular-cli.json
      "styles": [
        "../node_modules/bootstrap/dist/css/bootstrap.min.css",
        "styles.css"

// selector of component by tag
selector: 'app-my',   // in template : <app-my> </my-app>
// or attribute
selector: '[app-my]',  // in template : <div app-my> </div>
// or style
selector: '.my-app',  // in template : <div class="app-my"> </div>


// binding data *.component.ts -> *.component.html
myVariable = 'value';  ->  <p> My Variable : {{myVariable}} </p>

// binding attribute *.component.ts -> *.component.html
myFlag = false;     ->  <button [disabled] = "!myFlag"></button>

// binding *.component.html ->  *.component.ts
<button (click)="myHandler()"></button> ->
                constructor() {myHandler() {...}}

// input event processing *.component.html ->  *.component.ts/constructor
<input type="text" (input)="onKeyUp($event)">  ->
onKeyUp(event: Event) {
    this.inputText = (<HTMLInputElement>event.target).value;
}

// another way input event processing
//      *.component.html ->  *.component.ts/constructor
// construction " #myInp " is the referention to input HTML element
<input type="text" #myInp (input)="onKeyUp(myInp.value)">  ->
onKeyUp(value) {
    this.inputText = value;
}

// binding data when "Enter" will be pressed
<input type="text" (keyup)="onKeyUp($event)">  ->
onKeyUp(event) {
    if (event.code === 'Enter') {
        this.inputText = event.target.value;}
}

// or
<input type="text" (keyup.enter)="onKeyUp($event)">  ->
onKeyUp(event) {
        this.inputText = event.target.value;}

// two-way binding *.component.html <->  *.component.ts/constructor
<input type="text" [( ngModel )] = "inputText">     <-->
this.inputText = 'default text';
// !important in app.modules.ts file in chapter "imports"
// FormsModule must be imported

// Structure directives
//ngIf
<p *ngIf = "myFlag">My text</p>

// ngIf else
<p *ngIf = "myFlag; else myAnotherPar">My Text</p>
<ng-template #myAnotherPar><p> My Another Text </p></ng-template>

//ngFor
<app-mycomponent *ngFor="let item of items"></app-mycomponent>
// items is array!
<ul>
    <li *ngFor="let item of items; let i=index">{{i+1}} - {{item.value}}</li>
</ul>

// ngStyle
<div [ngStyle]="{'background-color': (i+1)%2===0 ? 'red' : 'transparent', 'color':'white'">..</div>

// ngClass
<div [ngClass]="{'my-class' : setMyClass(item)}">..</div>
//function result is boolean setMyClass()=true/false

// pipes (filtres)
{{ myDate | date: 'short' }}
{{ myString | uppercase }}


// transfer data into component My by one-way binding technique
<app-my *ngFor="let item of items" [itemPrivPropOfCompMy]="item">
</app-my>
// decorator in my.component.ts discrabe input data
export class MyComponent {
    @Input() itemPrivPropOfCompMy: {name: string, ...}
}
// alias for input parameter ( itemPrivPropOfCompMy = item )
<app-my *ngFor="let item of items" [it]="item">
    @Input('it') itemPrivPropOfCompMy: {name: string, ...}

// get data from component
<app-my (onAddData)="updateDataList($event)"></app-my>
// my.component.html
<button (click)="addData()"></button>
// my.component.ts
export class..
    @Output() onAddData = new EventEmitter<{name:string, ..}>();

    addData() {
        this.onAddData.emit({
            name: this.name,
            ..
        });
        this.name = '';
        ..
    } ..
// !important! we have to import methods from angular/core to component
import { Component, EventEmitter, Input, Output } from '@angular/core'

// spread styles from root.component.css to whole page
@Component({
    ..,
    encapsulation: ViewEncapsulation.None
})
// define local styles for component
encapsulation: ViewEncapsulation.Native

// Access to DOM element
// local reference to element #elemName
<input type="text" #itemNameInput>
<button (click)="addData(itemNameInput)"> Add Data </button>
// get data in *.ts
addData(element: HTMLInputElement) {
    inputData = element.value;
}
// access to element by decorator without event
@ViewChild('itemNameInput') itemNameInput: ElementRef;
export class.. {
inputData = this.itemNameInput.nativeElement.value;
}

// put parent html into child component
<app-cild ..> <div> Parent Content </div> </app-child>
// in child.component.html directive to use parent html code
<ng-content></ng-content>

// method start after page loading
ngAfterViewInit() {}

// reference (#itemNameInput) to element in child (another) component
@ContentChild('itemNameInput') itemNameInput: ElementRef;

// life cycles of component
//1 constructor
//2 ngOnChanges(changes: SimpleChanges)
//3 ngOnInit
//4 ngDoCheck
//5 ng AfterContentInit
//6 ng AfterContentChecked
//7 ngAfterViewInit
//8 ngAfterViewChecked
//9 ngOnDestroy


// CREATE CUSTOM DIRECTIVE, which will be used like an attribute
// mydirect.directive.ts
import { Directive, ElementRef, OnInit } from '@angular/core';
@Directive ({
    selector: '[appMyDirect]'
})
export class MyDirect implements OnInit {
    constructor(private element: ElementRef) {

    }
    ngOnInit() {
        this.element.nativeElement.style.backgroundColor = 'red';
    }
}
// using cli
>cd app/directives
>ng g d my-direct --spec=false

// USING RENDERER
..
constructor(private element: ElementRef, private renderer: Renderer2) {}
ngOnInit() {
    this.renderer.setStyle(this.element.nativeElement, 'backgroundColor', 'red');
    this.renderer.addClass(this.element.nativeElement, 'my-class');
}

// USING EVENTS
@HostListener('mouseenter', ['$event']) mouseEnter(event: Event) {
    consile.log(event);
}

@HostListener('mouseenter') mouseEnter() { // mouseLeave
    const {nativeElement} = this.element;
    this.renderer.addClass(nativeElement, 'my-class');
// on mouseleave
    //this.renderer.removeClass(nativeElement, 'my-class');
}

// or another way
@HostBinding ('style.backgroundColor') background: string;
@HostListener('mouseenter') mouseEnter() {
    this.background = 'red';
}

// bind data into directive
// using directive with controlled params
<div appMyDirect [hoverColor]="'red'" [defaultColor]="'transparent'"> My text </div>
// myDirect.ts
@Input() hoverColor: string = 'green'; // default value
@Input() defaultColor: string = 'transparent'; // default value
ngOnInit() {
    this.background = this.default.color;
}
@HostListener('mouseenter') mouseEnter() {
    this.background = this.hoverColor;
}
@HostListener('mouseleave') mouseLeave() {
    this.background = this.defaultColor;
}


// PIPES
{{ name | lowercase }}
{{ name | uppercase }}
{{ name | slice:0:3 | uppercase }} // substring from 0 to 3 symbols
{{ pi | number:'1.3-4'  }} // default format 3.142
{{ money | currency:'USD':true }} //'EUR'
{{ date | date:'fullDate' }}
{{ date | date:'shortDate' }}
{{ date | date:'shortTime' }} // angular.io>api>references
{{ amount | percent }}
<pre>{{ object | json}}</pre>

// CUSTOM PIPES
// template:
{{ number | appPow: 3:'=' }}
// pow.pipe.ts
// register in declaretions!
import {Pipe, PipeTransform} from '@angular/core';
@Pipe({
    name: 'appPow'
})
export class PowPipe implements PipeTransform {
    transform(value: number, powNumber: number = 1, symb:string = '') {
        return symb + Math.pow(value, powNumber);
    }
}
// create pipe by cli
>ng g p pow

// CUSTOM FILTRES by PIPES
// template
<input type="text" class="form-control" [(ngModel)]="searchCar"><hr>
<ul>
<li *ngFor="let car of cars| carFilter:searchCar:'name'; let i=index">
    {{i+1}} - {{car.name}} - {{car.descr}}
</li>
</ul>
// component
export ..
    searchCar = '';
    cars = [{name:'Ford', desct: 'WFM 1'}, ...]

app>ng g p carFilter --spec=false

// car-filter.pipe.ts
import { Pipe, PipeeTransform } from '@anguler/core';
@Pipe({
    name: 'carFilter',
    pure: true // false - faster start of filtration
})
export class CarFilterPipe implements PipeTransform {
    transform(carList, searshStr: string, fieldName: string) {
        if (carList.length === 0 || rearchStr === '') {
            return carList;
        }
        return carList.filter(
            car => car[fieldName].toLowerCase().indexOf(searchStr.toLowerCase()) == -1
        );
    }
}

// ROUTER
const appRoutes: Routes = [
  { path: 'page', component: PageComponent },
  { path: '', component: MainPageComponent }
]; // a/router

// modules:
imports: [RouterModule.forRoot(appRoutes)]
// app.component:
<router-outlet></router-outlet>
// app-routing.module.ts

<a routerLink="/page" routerLinkActive="active">Page</a>
<a routerLink="/page" 
  routerLinkActive="active" 
  [routerLinkActiveOptions]="{exact: true}"
>
  Page
</a>

// program routing 
constructor(private router: Router, private route: ActivatedRoute) {}
openPage() {
  this.router.navigate(['/page']);
this.router.navigate(['page'],{relativeTo: this.route});

// url parameters
  { path: 'page/:id', component: ItemComponent }
  [routerLink]="['/page', item.id]"
  // get 'id' from url in ItemComponent
  constructor(private route: ActivatedRoute) {}

// error handling
{ path: '**', component: 404PageComponent }

{ path: '404', component: 404PageComponent }
{ path: '**', redirect: '404' }

// guard
@Injectable()
export class AuthGuard implements CanActivate {
  constructor(private auth: AuthServise) {}
  canActivate(route: ActivatedRouteSnapshot, 
    state: RouterStateSnapshot)
    : Observable<boolean> | Promise<boolean> | boolean {
       this.auth.isAuth().then((isLoggedIn) => {
         if (isLoggedIn) { return true; }
         else { return false; }

    });   

    
  }
}
// routeng.module
 { path: 'page', component: PageComponent, canActivate: [AuthGuard] }
